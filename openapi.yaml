openapi: 3.0.1
servers:
  - url: https://lev-adapter-prp1.np.ebsa.homeoffice.gov.uk/
    description: Pre-production
  - url: https://lev-adapter.ebsa.homeoffice.gov.uk/
    description: Production
info:
  title: Life Event Verification (LEV) API
  description: |
    "A ReSTful API for verifying 'life events' such as births, deaths and marriages."
    
    # Environments
    The Life Event Verification service is deployed in multiple environments, many to facilitate development and testing. 
    
    For customer usage, only the pre-production (prp1) and production (prod) environments are used.
    
    # Keycloak/Bearer Tokens
    LEV uses Keycloak to issue Bearer Tokens and lev-adapter provides the endpoint /auth/token (a Keycloak wrapper) 
    to obtain one that is documented below.

  contact:
    email: levapi@digital.homeoffice.gov.uk
  version: 0.0.3
tags:
  - name: birth
    description: Birth records
  - name: death
    description: Death records
  - name: marriage
    description: Marriage records
  - name: partnership
    description: Civil partnership records
  - name: token
    description: Bearer Token to Access API
security:
  - bearerToken: []
paths:
  /auth/token:
    post:
      summary: Returns a bearer token required for API usage
      tags:
        - token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      security: []
  /api/v0/events/birth:
    get:
      tags:
        - birth
      summary: Search for birth records
      description: "Search for birth records by supplying the date of birth, surname\
        \ and at least the first forename of the child."
      operationId: searchBirth
      parameters:
        - name: forenames
          in: query
          description: The child's forenames. The first name must be provided but middlenames
            are optional.
          required: true
          schema:
            type: string
          example: Joan
        - name: lastname
          in: query
          description: The child's surname.
          required: true
          schema:
            type: string
          example: Smith
        - name: dateofbirth
          in: query
          description: The child's date of birth in international format.
          required: true
          schema:
            type: string
            format: date
          example: 2008-08-08
      responses:
        default:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"BadRequest","message":"Must provide the dateOfBirth parameter"}
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v0-Births'
              example: |
                [{
                  "location": {
                    "name": "Test District, Test Subdistrict, Reading",
                    "administrativeArea": "Reading",
                    "subDistrict": "Test Subdistrict",
                    "nameQualifier": "generated by concatenating registrationDistrict, subDistrict and administrativeArea",
                    "registrationDistrict": "Test District"
                  },
                  "subjects": {
                    "child": {
                      "originalName": {

                      },
                      "name": {
                        "givenName": "Tester One",
                        "surname": "Multiple",
                        "fullName": "Tester One Multiple",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "dateOfBirth": "2010-01-01",
                      "sex": "Male",
                      "birthplace": "Test Address"
                    },
                    "father": {
                      "name": {
                        "givenName": "Dad One",
                        "surname": "Multiple",
                        "fullName": "Dad One Multiple",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "birthplace": "Test Birthplace"
                    },
                    "mother": {
                      "name": {
                        "givenName": "Mum One",
                        "surname": "Multiple",
                        "fullName": "Mum One Multiple",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "birthplace": "Test Birthplace",
                      "maidenSurname": "prev-Multiple",
                      "marriageSurname": "prev-M-Multiple"
                    },
                    "informant": {
                      "name": {

                      },
                      "qualification": "Mother",
                      "signature": "Mary Manzarek"
                    }
                  },
                  "systemNumber": 999999901,
                  "id": 999999901,
                  "date": "2014-10-10",
                  "status": {
                    "potentiallyFictitiousBirth": false,
                    "correction": "None",
                    "cancelled": false,
                    "blockedRegistration": false,
                    "marginalNote": "None",
                    "reRegistered": "None"
                  },
                  "previousRegistration": {

                  }
                }, {
                  "location": {
                    "name": "Test District, Test Subdistrict, Reading",
                    "administrativeArea": "Reading",
                    "subDistrict": "Test Subdistrict",
                    "nameQualifier": "generated by concatenating registrationDistrict, subDistrict and administrativeArea",
                    "registrationDistrict": "Test District"
                  },
                  "subjects": {
                    "child": {
                      "originalName": {

                      },
                      "name": {
                        "givenName": "Tester Two",
                        "surname": "Multiple",
                        "fullName": "Tester Two Multiple",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "dateOfBirth": "2010-01-01",
                      "sex": "Male",
                      "birthplace": "Test Address"
                    },
                    "father": {
                      "name": {
                        "givenName": "Dad Two",
                        "surname": "Multiple",
                        "fullName": "Dad Two Multiple",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "birthplace": "Test Birthplace"
                    },
                    "mother": {
                      "name": {
                        "givenName": "Mum Two",
                        "surname": "Multiple",
                        "fullName": "Mum Two Multiple",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "birthplace": "Test Birthplace",
                      "maidenSurname": "prev-Multiple",
                      "marriageSurname": "prev-M-Multiple"
                    },
                    "informant": {
                      "name": {

                      },
                      "qualification": "Mother",
                      "signature": "Mary Manzarek"
                    }
                  },
                  "systemNumber": 999999902,
                  "id": 999999902,
                  "date": "2014-10-10",
                  "status": {
                    "potentiallyFictitiousBirth": false,
                    "correction": "None",
                    "cancelled": false,
                    "blockedRegistration": false,
                    "marginalNote": "None",
                    "reRegistered": "None"
                  },
                  "previousRegistration": {

                  }
                }, {
                  "location": {
                    "name": "Test District, Test Subdistrict, Reading",
                    "administrativeArea": "Reading",
                    "subDistrict": "Test Subdistrict",
                    "nameQualifier": "generated by concatenating registrationDistrict, subDistrict and administrativeArea",
                    "registrationDistrict": "Test District"
                  },
                  "subjects": {
                    "child": {
                      "originalName": {

                      },
                      "name": {
                        "givenName": "Tester Three",
                        "surname": "Multiple",
                        "fullName": "Tester Three Multiple",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "dateOfBirth": "2010-01-01",
                      "sex": "Male",
                      "birthplace": "Test Address"
                    },
                    "father": {
                      "name": {
                        "givenName": "Dad Three",
                        "surname": "Multiple",
                        "fullName": "Dad Three Multiple",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "birthplace": "Test Birthplace"
                    },
                    "mother": {
                      "name": {
                        "givenName": "Mum Three",
                        "surname": "Multiple",
                        "fullName": "Mum Three Multiple",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "birthplace": "Test Birthplace",
                      "maidenSurname": "prev-Multiple",
                      "marriageSurname": "prev-M-Multiple"
                    },
                    "informant": {
                      "name": {

                      },
                      "qualification": "Mother",
                      "signature": "Mary Manzarek"
                    }
                  },
                  "systemNumber": 999999903,
                  "id": 999999903,
                  "date": "2014-10-10",
                  "status": {
                    "potentiallyFictitiousBirth": false,
                    "correction": "None",
                    "cancelled": false,
                    "blockedRegistration": false,
                    "marginalNote": "None",
                    "reRegistered": "None"
                  },
                  "previousRegistration": {

                  }
                }]
  /api/v0/events/birth/{systemNumber}:
    get:
      tags:
        - birth
      summary: Look up a specific birth record
      description: Look up individual birth records using the `systemNumber` printed
        in the bottom-left of the birth certificate.
      operationId: readBirth
      parameters:
        - name: systemNumber
          in: path
          description: The system number printed in the bottom-left of the birth certificate
          required: true
          schema:
            type: integer
          example: 123456789
      responses:
        default:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"BadRequest","message":"Must provide the dateOfBirth parameter"}
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"ResourceNotFound","message":"/404 does not exist"}
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v0-Birth'
              example: |
                {
                  "location": {
                    "name": "Test District, Test Subdistrict, Reading",
                    "administrativeArea": "Reading",
                    "subDistrict": "Test Subdistrict",
                    "nameQualifier": "generated by concatenating registrationDistrict, subDistrict and administrativeArea",
                    "registrationDistrict": "Test District"
                  },
                  "subjects": {
                    "child": {
                      "originalName": {
                      },
                      "name": {
                        "givenName": "Tester",
                        "surname": "Solo",
                        "fullName": "Tester Solo",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "dateOfBirth": "2012-02-29",
                      "sex": "Male",
                      "birthplace": "Test Address"
                    },
                    "father": {
                      "name": {
                        "givenName": "Dad",
                        "surname": "Solo",
                        "fullName": "Dad Solo",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "birthplace": "Test Birthplace"
                    },
                    "mother": {
                      "name": {
                        "givenName": "Mum",
                        "surname": "Solo",
                        "fullName": "Mum Solo",
                        "qualifier": "generated from prepending forename to surname"
                      },
                      "birthplace": "Test Birthplace",
                      "maidenSurname": "prev-Solo",
                      "marriageSurname": "prev-M-Solo"
                    },
                    "informant": {
                      "name": {
                      },
                      "qualification": "Mother",
                      "signature": "Mary Manzarek"
                    }
                  },
                  "systemNumber": 999999910,
                  "id": 999999910,
                  "date": "2014-10-10",
                  "status": {
                    "potentiallyFictitiousBirth": false,
                    "correction": "None",
                    "cancelled": false,
                    "blockedRegistration": false,
                    "marginalNote": "None",
                    "reRegistered": "None"
                  },
                  "previousRegistration": {
                  }
                }
  /v1/registration/birth:
    get:
      tags:
        - birth
      summary: Search for birth records
      description: "Search for birth records by supplying the date of birth, surname\
        \ and at least the first forename of the child."
      operationId: searchV1Birth
      parameters:
        - name: forenames
          in: query
          description: The child's forenames. The first name must be provided but middlenames
            are optional.
          required: true
          schema:
            type: string
          example: Joan
        - name: surname
          in: query
          description: The child's surname.
          required: true
          schema:
            type: string
          example: Smith
        - name: dateOfBirth
          in: query
          description: The child's date of birth in international format.
          required: true
          schema:
            type: string
            format: date
          example: 2008-08-08
      responses:
        default:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"BadRequest","message":"Must provide the dateOfBirth parameter"}
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1-Births'
  /v1/registration/birth/{id}:
    get:
      tags:
        - birth
      summary: Look up a specific birth record
      description: "Look up individual birth records using the `systemNumber` printed\
        \ in the bottom-left of the birth certificate."
      operationId: readV1Birth
      parameters:
        - name: id
          in: path
          description: The system number printed in the bottom-left of the birth certificate
          required: true
          schema:
            type: integer
          example: 123456789
      responses:
        default:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"BadRequest","message":"Must provide the dateOfBirth parameter"}
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"ResourceNotFound","message":"/404 does not exist"}
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1-Birth'
  /v1/registration/death:
    get:
      tags:
        - death
      summary: Search for death records
      description: "Search for death records by supplying the surname, at least the\
        \ first forename and either the date of birth or the date of death of the\
        \ deceased."
      operationId: searchV1Death
      parameters:
        - name: forenames
          in: query
          description: The deceased's forenames. The first name must be provided but
            middlenames are optional.
          required: true
          schema:
            type: string
          example: Joan
        - name: surname
          in: query
          description: The deceased's surname.
          required: true
          schema:
            type: string
          example: Smith
        - name: date
          in: query
          description: The deceased's date of birth or death in international format.
          required: true
          schema:
            type: string
            format: date
          example: 2008-08-08
      responses:
        default:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"BadRequest","message":"Must provide the dateOfBirth parameter"}
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1-Deaths'
  /v1/registration/death/{id}:
    get:
      tags:
        - death
      summary: Look up a specific death record
      description: "Look up individual death records using the `systemNumber` printed\
        \ in the bottom-left of the death certificate."
      operationId: readV1Death
      parameters:
        - name: id
          in: path
          description: The system number printed in the bottom-left of the death certificate
          required: true
          schema:
            type: integer
          example: 123456789
      responses:
        default:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"BadRequest","message":"Must provide the dateOfBirth parameter"}
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"ResourceNotFound","message":"/404 does not exist"}
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1-Death'
  /v1/registration/marriage:
    get:
      tags:
        - marriage
      summary: Search for marriage records
      description: "Search for marriage records by supplying the date of marriage\
        \ as well as the surname and at least the first forename of one of the partners."
      operationId: searchV1Marriage
      parameters:
        - name: forenames
          in: query
          description: The person's forenames. The first name must be provided but middlenames
            are optional.
          required: true
          schema:
            type: string
          example: Joan
        - name: surname
          in: query
          description: The person's surname.
          required: true
          schema:
            type: string
          example: Smith
        - name: dateOfMarriage
          in: query
          description: The date of the marriage in international format.
          required: true
          schema:
            type: string
            format: date
          example: 2008-08-08
      responses:
        default:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"BadRequest","message":"Must provide the dateOfBirth parameter"}
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1-Marriages'
  /v1/registration/marriage/{id}:
    get:
      tags:
        - marriage
      summary: Look up a specific marriage record
      description: "Look up individual marriage records using the `systemNumber` printed\
        \ in the bottom-left of the marriage certificate."
      operationId: readV1Marriage
      parameters:
        - name: id
          in: path
          description: The system number printed in the bottom-left of the marriage
            certificate
          required: true
          schema:
            type: integer
          example: 123456789
      responses:
        default:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"BadRequest","message":"Must provide the dateOfBirth parameter"}
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"ResourceNotFound","message":"/404 does not exist"}
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1-Marriage'
  /v1/registration/partnership:
    get:
      tags:
        - partnership
      summary: Search for civil partnership records
      description: "Search for civil partnership records by supplying the date of\
        \ the civil partnership as well as the surname and at least the first forename\
        \ of one of the partners."
      operationId: searchV1Partnership
      parameters:
        - name: forenames
          in: query
          description: The person's forenames. The first name must be provided but middlenames
            are optional.
          required: true
          schema:
            type: string
          example: Joan
        - name: surname
          in: query
          description: The person's surname.
          required: true
          schema:
            type: string
          example: Smith
        - name: dateOfPartnership
          in: query
          description: The date of the civil partnership in international format.
          required: true
          schema:
            type: string
            format: date
          example: 2008-08-08
      responses:
        default:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"BadRequest","message":"Must provide the dateOfBirth parameter"}
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1-Partnerships'
  /v1/registration/partnership/{id}:
    get:
      tags:
        - partnership
      summary: Look up a specific civil partnership record
      description: "Look up individual civil partnership records using the `systemNumber`\
        \ printed in the bottom-left of the civil partnership certificate."
      operationId: readV1Partnership
      parameters:
        - name: id
          in: path
          description: The system number printed in the bottom-left of the civil partnership
            certificate
          required: true
          schema:
            type: integer
          example: 123456789
      responses:
        default:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"BadRequest","message":"Must provide the dateOfBirth parameter"}
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
              example: |
                {"code":"ResourceNotFound","message":"/404 does not exist"}
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1-Partnership'
components:
  schemas:
    generalError:
      title: Error
      required:
        - code
        - message
      type: object
      properties:
        code:
          title: Code
          type: string
          description: The type of error
          example: BadRequest
        message:
          title: Message
          type: string
          description: The error message
          example: Must provide the dateOfBirth parameter
      description: An error
    v0-Birth:
      title: Birth record (v0)
      required:
        - id
        - location
        - previousRegistration
        - status
        - subjects
      type: object
      properties:
        date:
          title: Date
          type: string
          description: Date of the event
          format: date
          example: 2011-08-09
        location:
          title: Location
          type: object
          properties:
            name:
              title: Name
              type: string
              description: Name
              example: "Manchester, Manchester, Metropolitan District of Manchester"
            nameQualifier:
              title: Name qualifier
              type: string
              description: Name qualifier
              example: "generated by concatenating registrationDistrict, subDistrict\
                \ and administrativeArea"
            registrationDistrict:
              title: Registration district
              type: string
              description: Registration district
              example: Manchester
            subDistrict:
              title: Sub-district
              type: string
              description: Sub-district
              example: Manchester
            administrativeArea:
              title: Administrative area
              type: string
              description: Administrative area
              example: Metropolitan District of Manchester
          description: Location that the event happened at
        registrarSignature:
          title: Registrar signature
          type: string
          description: Signature of registrar
          example: J. Smith
        type:
          title: Type
          type: string
          description: Type of the event
          example: birth
        id:
          title: ID
          type: integer
          description: Unique ID for this event
          format: int32
        subjects:
          title: Subjects
          type: object
          properties:
            child:
              title: Child
              type: object
              properties:
                name:
                  title: Name
                  type: object
                  properties:
                    givenName:
                      title: Given name
                      type: string
                      description: Given name of the person
                      example: Joan Narcissus Ouroboros
                    surname:
                      title: Surname
                      type: string
                      description: Surname of the person
                      example: Smith
                    fullName:
                      title: Full name
                      type: string
                      description: Full name of the person
                      example: Joan Narcissus Ouroboros Smith
                    qualifier:
                      title: Qualifier
                      type: string
                      description: Details about how the full name was made
                      example: generated from prepending forename to surname
                  description: Name of the person
                birthplace:
                  title: Birthplace
                  type: string
                  description: The birthplace of the person
                  example: Kensington
                dateOfBirth:
                  title: Date of birth
                  type: string
                  description: Date of birth of the person
                  format: date
                  example: 2011-08-08
                sex:
                  title: Sex
                  type: string
                  description: Sex of the person
                  example: Indeterminate
                  enum:
                    - Male
                    - Female
                    - Indeterminate
                originalName:
                  title: Original name
                  type: object
                  properties:
                    givenName:
                      title: Given name
                      type: string
                      description: Given name of the person
                      example: Joan Narcissus Ouroboros
                    surname:
                      title: Surname
                      type: string
                      description: Surname of the person
                      example: Smith
                    fullName:
                      title: Full name
                      type: string
                      description: Full name of the person
                      example: Joan Narcissus Ouroboros Smith
                    qualifier:
                      title: Qualifier
                      type: string
                      description: Details about how the full name was made
                      example: generated from prepending forename to surname
                  description: The name originally given to the person
              description: Child
            father:
              title: Father
              type: object
              properties:
                name:
                  title: Name
                  type: object
                  properties:
                    givenName:
                      title: Given name
                      type: string
                      description: Given name of the person
                      example: Joan Narcissus Ouroboros
                    surname:
                      title: Surname
                      type: string
                      description: Surname of the person
                      example: Smith
                    fullName:
                      title: Full name
                      type: string
                      description: Full name of the person
                      example: Joan Narcissus Ouroboros Smith
                    qualifier:
                      title: Qualifier
                      type: string
                      description: Details about how the full name was made
                      example: generated from prepending forename to surname
                  description: Name of the person
                birthplace:
                  title: Birthplace
                  type: string
                  description: The birthplace of the person
                  example: Kensington
                occupation:
                  title: Occupation
                  type: string
                  description: The occupation of the parent
                  example: Carpenter
              description: Father
            mother:
              title: Mother
              type: object
              properties:
                name:
                  title: Name
                  type: object
                  properties:
                    givenName:
                      title: Given name
                      type: string
                      description: Given name of the person
                      example: Joan Narcissus Ouroboros
                    surname:
                      title: Surname
                      type: string
                      description: Surname of the person
                      example: Smith
                    fullName:
                      title: Full name
                      type: string
                      description: Full name of the person
                      example: Joan Narcissus Ouroboros Smith
                    qualifier:
                      title: Qualifier
                      type: string
                      description: Details about how the full name was made
                      example: generated from prepending forename to surname
                  description: Name of the person
                birthplace:
                  title: Birthplace
                  type: string
                  description: The birthplace of the person
                  example: Kensington
                occupation:
                  title: Occupation
                  type: string
                  description: The occupation of the parent
                  example: Carpenter
                maidenSurname:
                  title: Maiden surname
                  type: string
                  description: Maiden surname
                  example: Black
                marriageSurname:
                  title: Marriage surname
                  type: string
                  description: Surname at marriage if different from maiden surname
                  example: White
                usualAddress:
                  title: Usual address
                  type: string
                  description: Usual address (if different from the place of child's
                    birth)
                  example: "34 Matriarchs Place, Mumstown, Mumford"
              description: Mother
            informant:
              title: Informant
              type: object
              properties:
                name:
                  title: Name
                  type: object
                  properties:
                    givenName:
                      title: Given name
                      type: string
                      description: Given name of the person
                      example: Joan Narcissus Ouroboros
                    surname:
                      title: Surname
                      type: string
                      description: Surname of the person
                      example: Smith
                    fullName:
                      title: Full name
                      type: string
                      description: Full name of the person
                      example: Joan Narcissus Ouroboros Smith
                    qualifier:
                      title: Qualifier
                      type: string
                      description: Details about how the full name was made
                      example: generated from prepending forename to surname
                  description: Name of the person
                usualAddress:
                  title: Usual address
                  type: string
                  description: "The usual address of the person, if different from\
                    \ the mother's"
                  example: "34 Matriarchs Place, Mumstown, Mumford"
                qualification:
                  title: Qualification
                  type: string
                  description: The qualification of the informant
                  example: Mother
                signature:
                  title: Signature
                  type: string
                  description: The signature of the informant
                  example: J. Smith
              description: Informant
          description: "People involved, may have keys parent1,parent2,child"
        systemNumber:
          title: System number
          type: integer
          description: System number for this event
          format: int32
        status:
          title: Status
          required:
            - blockedRegistration
          type: object
          properties:
            blockedRegistration:
              title: Blocked registration
              type: boolean
              description: Indicates if data for this record has been blocked
            cancelled:
              title: Cancelled
              type: boolean
              description: Indicates if record was cancelled
            potentiallyFictitiousBirth:
              title: Potentially fictitious birth
              type: boolean
              description: Indicates if a birth may be fictitious
            reRegistered:
              title: Re-registered
              type: string
              description: Describes if this is a re-registration and why it was needed
              enum:
                - None
                - Father modified
                - Father added
                - Replacement registration
                - Other
                - Subsequently married
            correction:
              title: Correction
              type: string
              description: Indicates if there has been a correction to this record
              enum:
                - Typographical
                - Simple clerical
                - Complex clerical
                - Error of fact
                - None
            marginalNote:
              title: Marginal note
              type: string
              description: Gives additional notes on a record
              enum:
                - Re-registered
                - Court order in place
                - Court order revoked
                - Other
                - None
          description: Status flags associated with this birth
        previousRegistration:
          title: Previous registration
          type: object
          properties:
            date:
              title: Date
              type: string
              description: Date of the event
              format: date
              example: 2011-08-09
            systemNumber:
              title: System number
              type: integer
              description: System number for this event
              format: int32
          description: "Details of the previous record, where one exists"
      description: "A record of a birth (Note: You will only receive the fields you\
        \ are authorized to view, regardless of whether we hold them on file)"
    v1-Birth:
      title: Birth record (v1)
      required:
        - child
        - date
        - father
        - id
        - mother
        - status
      type: object
      properties:
        id:
          title: ID
          type: integer
          description: System number for this event
          format: int32
        date:
          title: Date
          type: string
          description: Date the birth was registered
          format: date
          example: 2011-08-09
        child:
          title: Child
          required:
            - dateOfBirth
            - forenames
            - sex
            - surname
          type: object
          properties:
            forenames:
              title: forenames
              type: string
              description: Forenames of the child
              example: Joan Narcissus Ouroboros
            originalForenames:
              title: forenames
              type: string
              description: The forenames originally given to the child before they
                were changed
              example: John Narcissus Ouroboros
            surname:
              title: Surname
              type: string
              description: Surname of the child
              example: SMITH
            dateOfBirth:
              title: Date of birth
              type: string
              description: Date of birth of the child
              format: date
              example: 2011-08-08
            sex:
              title: Sex
              type: string
              description: Sex of the child
              example: Indeterminate
              enum:
                - Male
                - Female
                - Indeterminate
            birthplace:
              title: Birthplace
              type: string
              description: The birthplace of the child
              example: Kensington
          description: The child that was born
        mother:
          title: Mother
          required:
            - forenames
            - surname
          type: object
          properties:
            forenames:
              title: forenames
              type: string
              description: Forenames of the mother
              example: Joan Narcissus Ouroboros
            surname:
              title: Surname
              type: string
              description: Surname of the mother
              example: SMITH
            maidenSurname:
              title: Maiden surname
              type: string
              description: Maiden name of the mother
              example: BLACK
            marriageSurname:
              title: Marriage surname
              type: string
              description: Surname of the mother at marriage (if different from her
                maiden name)
              example: WHITE
            birthplace:
              title: Birthplace
              type: string
              description: The birthplace of the mother
              example: Kensington
            occupation:
              title: Occupation
              type: string
              description: The occupation of the mother
              example: Carpenter
            address:
              title: Address
              type: string
              description: The mother's usual address (if different from the place
                of child's birth)
              example: "34 Matriarchs Place, Mumstown, Mumford"
          description: The mother of the child that was born
        father:
          title: Father
          required:
            - deceased
          type: object
          properties:
            forenames:
              title: forenames
              type: string
              description: Forenames of the father
              example: Joan Narcissus Ouroboros
            surname:
              title: Surname
              type: string
              description: Surname of the father
              example: SMITH
            birthplace:
              title: Birthplace
              type: string
              description: The birthplace of the father
              example: Kensington
            occupation:
              title: Occupation
              type: string
              description: The occupation of the father
              example: Carpenter
            deceased:
              title: Deceased
              type: boolean
              description: Whether the father was deceased at the point of birth
              example: false
          description: The father of the child that was born
        status:
          title: Status
          required:
            - blocked
          type: object
          properties:
            blocked:
              title: Blocked registration
              type: boolean
              description: Indicates if data for this record has been blocked
            cancelled:
              title: Cancelled
              type: boolean
              description: Indicates if record was cancelled
            correction:
              title: Correction
              type: string
              description: Indicates if there has been a correction to this record
              enum:
                - Typographical
                - Simple clerical
                - Complex clerical
                - Error of fact
                - None
            marginalNote:
              title: Marginal note
              type: string
              description: Gives additional notes on a record
              enum:
                - Re-registered
                - Court order in place
                - Court order revoked
                - Other
                - None
            potentiallyFictitiousBirth:
              title: Potentially fictitious birth
              type: boolean
              description: Indicates if a birth may be fictitious
            reregistration:
              title: Reregistration
              type: string
              description: Describes if this is a reregistration and why it was needed
              enum:
                - None
                - Father modified
                - Father added
                - Replacement registration
                - Other
                - Subsequently married
          description: Status flags associated with this record
      description: "A record of a birth (Note: You will only receive the fields you\
        \ are authorized to view, regardless of whether we hold them on file)"
    v1-Death:
      title: Death record (v1)
      required:
        - date
        - deceased
        - id
        - status
      type: object
      properties:
        id:
          title: ID
          type: integer
          description: System number for this event
          format: int32
        date:
          title: Date
          type: string
          description: Date the death was registered
          format: date
          example: 2011-08-09
        deceased:
          title: Deceased
          required:
            - dateOfDeath
            - forenames
            - sex
            - surname
          type: object
          properties:
            forenames:
              title: forenames
              type: string
              description: Forenames of the deceased
              example: Joan Narcissus Ouroboros
            surname:
              title: Surname
              type: string
              description: Surname of the deceased
              example: SMITH
            dateOfBirth:
              title: Date of birth
              type: string
              description: Date the deceased was born
              format: date
              example: 2011-08-08
            dateOfDeath:
              title: Date of death
              type: string
              description: Date the person died
              format: date
              example: 2011-08-08
            sex:
              title: Sex
              type: string
              description: Sex of the deceased
              example: Indeterminate
              enum:
                - Male
                - Female
                - Indeterminate
            birthplace:
              title: Birthplace
              type: string
              description: The birthplace of the deceased
              example: Kensington
            deathplace:
              title: Deathplace
              type: string
              description: The place the person died
              example: Kensington
            occupation:
              title: Occupation
              type: string
              description: The occupation of the deceased
              example: Unemployed
            address:
              title: Address
              type: string
              description: The deceased's address
              example: "888 Death House, 8 Death lane, Deadington, Deadshire"
            retired:
              title: Retired
              type: boolean
              description: Whether the deceased was retired
              example: true
            maidenSurname:
              title: Maiden surname
              type: string
              description: Maiden name of the deceased
              example: BLACK
          description: The person that died
        status:
          title: Status
          required:
            - blocked
          type: object
          properties:
            blocked:
              title: Blocked registration
              type: boolean
              description: Indicates if data for this record has been blocked
          description: Status flags associated with this record
      description: "A record of a death (Note: You will only receive the fields you\
        \ are authorized to view, regardless of whether we hold them on file)"
    v1-Marriage:
      title: Marriage record (v1)
      required:
        - bride
        - dateOfMarriage
        - groom
        - id
        - status
      type: object
      properties:
        id:
          title: ID
          type: integer
          description: System number for this event
          format: int32
        dateOfMarriage:
          title: Date of marriage
          type: string
          description: Date of the marriage
          format: date
          example: 2008-08-08
        groom:
          title: Groom
          required:
            - condition
            - forenames
            - surname
          type: object
          properties:
            forenames:
              title: forenames
              type: string
              description: Forenames of the person
              example: Joan Narcissus Ouroboros
            surname:
              title: Surname
              type: string
              description: Surname of the person
              example: SMITH
            age:
              title: Age
              type: integer
              description: Age of the person when they got married
              format: int32
            occupation:
              title: Occupation
              type: string
              description: The occupation of the person
              example: Unemployed
            retired:
              title: Retired
              type: boolean
              description: Whether the person was retired
              example: false
            address:
              title: Address
              type: string
              description: The person's address
              example: "888 Groom House, 8 Groom grove, Wedford, Wedfordshire, GR0\
                \ 0M"
            condition:
              title: Condition
              type: string
              description: "Whether the person was single, divorced, widowed etc."
              example: Single
            signature:
              title: Signature
              type: string
              description: A digital representation of the person's signature
              example: J.N.O. Smith
          description: The groom (or first partner)
        bride:
          title: Bride
          required:
            - condition
            - forenames
            - surname
          type: object
          properties:
            forenames:
              title: forenames
              type: string
              description: Forenames of the person
              example: Joan Narcissus Ouroboros
            surname:
              title: Surname
              type: string
              description: Surname of the person
              example: BLACK
            age:
              title: Age
              type: integer
              description: Age of the person when they got married
              format: int32
            occupation:
              title: Occupation
              type: string
              description: The occupation of the person
              example: Unemployed
            retired:
              title: Retired
              type: boolean
              description: Whether the person was retired
              example: false
            address:
              title: Address
              type: string
              description: The person's address
              example: "888 Bride House, 8 Bride grove, Wedford, Wedfordshire, BR1\
                \ 2E"
            condition:
              title: Condition
              type: string
              description: "Whether the person was single, divorced, widowed etc."
              example: Single
            signature:
              title: Signature
              type: string
              description: A digital representation of the person's signature
              example: J.N.O. Black
          description: The bride (or second partner)
        status:
          title: Status
          required:
            - blocked
          type: object
          properties:
            blocked:
              title: Blocked registration
              type: boolean
              description: Indicates if data for this record has been blocked
          description: Status flags associated with this record
      description: "A record of a marriage (Note: You will only receive the fields\
        \ you are authorized to view, regardless of whether we hold them on file)"
    v1-Partnership:
      title: Civil partnership record (v1)
      required:
        - dateOfPartnership
        - id
        - partner1
        - partner2
        - status
      type: object
      properties:
        id:
          title: ID
          type: integer
          description: System number for this event
          format: int32
        dateOfPartnership:
          title: Date of civil partnership
          type: string
          description: Date of the civil partnership
          format: date
          example: 2008-08-08
        partner1:
          title: First partner
          required:
            - condition
            - forenames
            - surname
          type: object
          properties:
            forenames:
              title: forenames
              type: string
              description: Forenames of the person
              example: Joan Narcissus Ouroboros
            surname:
              title: Surname
              type: string
              description: Surname of the person
              example: SMITH
            dateOfBirth:
              title: Date of birth
              type: string
              description: Date the person was born
              format: date
              example: 2011-08-08
            sex:
              title: Sex
              type: string
              description: Sex of the person
              example: Indeterminate
              enum:
                - Male
                - Female
                - Indeterminate
            occupation:
              title: Occupation
              type: string
              description: The occupation of the person
              example: Unemployed
            retired:
              title: Retired
              type: boolean
              description: Whether the person was retired
              example: false
            address:
              title: Address
              type: string
              description: The person's address
              example: "888 Groom House, 8 Groom grove, Wedford, Wedfordshire, GR0\
                \ 0M"
            condition:
              title: Condition
              type: string
              description: "Whether the person was single, divorced, widowed etc."
              example: Single
            signature:
              title: Signature
              type: string
              description: A digital representation of the person's signature
              example: J.N.O. Smith
          description: The first partner
        partner2:
          title: Second partner
          required:
            - condition
            - forenames
            - surname
          type: object
          properties:
            forenames:
              title: forenames
              type: string
              description: Forenames of the person
              example: Joan Narcissus Ouroboros
            surname:
              title: Surname
              type: string
              description: Surname of the person
              example: BLACK
            dateOfBirth:
              title: Date of birth
              type: string
              description: Date the person was born
              format: date
              example: 2011-08-08
            sex:
              title: Sex
              type: string
              description: Sex of the person
              example: Indeterminate
              enum:
                - Male
                - Female
                - Indeterminate
            occupation:
              title: Occupation
              type: string
              description: The occupation of the person
              example: Unemployed
            retired:
              title: Retired
              type: boolean
              description: Whether the person was retired
              example: false
            address:
              title: Address
              type: string
              description: The person's address
              example: "888 Bride House, 8 Bride grove, Wedford, Wedfordshire, BR1\
                \ 2E"
            condition:
              title: Condition
              type: string
              description: "Whether the person was single, divorced, widowed etc."
              example: Single
            signature:
              title: Signature
              type: string
              description: A digital representation of the person's signature
              example: J.N.O. Black
          description: The second partner
        status:
          title: Status
          required:
            - blocked
          type: object
          properties:
            blocked:
              title: Blocked registration
              type: boolean
              description: Indicates if data for this record has been blocked
          description: Status flags associated with this record
      description: "A record of a civil partnership (Note: You will only receive the\
        \ fields you are authorized to view, regardless of whether we hold them on\
        \ file)"
    v0-Births:
      title: List of (v0) birth records
      type: array
      items:
        $ref: '#/components/schemas/v0-Birth'
    v1-Births:
      title: List of (v1) birth records
      type: array
      items:
        $ref: '#/components/schemas/v1-Birth'
    v1-Deaths:
      title: List of (v1) death records
      type: array
      items:
        $ref: '#/components/schemas/v1-Death'
    v1-Marriages:
      title: List of (v1) marriage records
      type: array
      items:
        $ref: '#/components/schemas/v1-Marriage'
    v1-Partnerships:
      title: List of (v1) civil partnership records
      type: array
      items:
        $ref: '#/components/schemas/v1-Partnership'
  responses:
    badRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/generalError'
          example: |
            {"code":"BadRequest","message":"Must provide the dateOfBirth parameter"}
    notFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/generalError'
          example: |
            {"code":"ResourceNotFound","message":"/404 does not exist"}
  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
    mockHeaderUsername:
      type: apiKey
      description: "Dummy header representing the username, required only by the mock"
      name: X-Auth-Username
      in: header
    mockHeaderClient:
      type: apiKey
      description: "Dummy header representing the client, required only by the mock"
      name: X-Auth-Aud
      in: header
