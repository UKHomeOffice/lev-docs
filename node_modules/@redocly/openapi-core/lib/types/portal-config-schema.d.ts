import type { NodeType } from '.';
export declare const ssoConfigSchema: NodeType;
export declare const apiConfigSchema: {
    readonly type: "object";
    readonly properties: {
        readonly root: {
            readonly type: "string";
        };
        readonly rbac: {
            readonly type: "object";
            readonly additionalProperties: true;
        };
        readonly theme: {
            readonly type: "object";
            readonly properties: {
                readonly openapi: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly additionalProperties: false;
        };
        readonly title: {
            readonly type: "string";
        };
        readonly metadata: {
            readonly type: "object";
            readonly additionalProperties: true;
        };
    };
    readonly additionalProperties: true;
    readonly required: readonly ["root"];
};
export declare const PortalConfigNodeTypes: Record<string, NodeType>;
export declare const redoclyConfigSchema: NodeType;
export declare const environmentSchema: {
    readonly oneOf: readonly [{
        readonly additionalProperties: false;
        readonly properties: Record<string, (string | import(".").ScalarSchema | NodeType | null | undefined) | ((value: any, key: string) => string | import(".").ScalarSchema | NodeType | null | undefined)>;
        readonly items?: string | undefined;
        readonly required?: string[] | ((value: any, key: string | number | undefined) => string[]) | undefined;
        readonly requiredOneOf?: string[] | undefined;
        readonly allowed?: ((value: any) => string[] | undefined) | undefined;
        readonly extensionsPrefix?: string | undefined;
    }, {
        readonly type: "object";
        readonly properties: {
            readonly $ref: {
                readonly type: "string";
            };
        };
        readonly required: readonly ["$ref"];
        readonly additionalProperties: false;
    }];
};
export declare const rootRedoclyConfigSchema: {
    readonly properties: {
        readonly env: {
            readonly type: "object";
            readonly properties: {};
            readonly additionalProperties: {
                readonly oneOf: readonly [{
                    readonly additionalProperties: false;
                    readonly properties: Record<string, (string | import(".").ScalarSchema | NodeType | null | undefined) | ((value: any, key: string) => string | import(".").ScalarSchema | NodeType | null | undefined)>;
                    readonly items?: string | undefined;
                    readonly required?: string[] | ((value: any, key: string | number | undefined) => string[]) | undefined;
                    readonly requiredOneOf?: string[] | undefined;
                    readonly allowed?: ((value: any) => string[] | undefined) | undefined;
                    readonly extensionsPrefix?: string | undefined;
                }, {
                    readonly type: "object";
                    readonly properties: {
                        readonly $ref: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["$ref"];
                    readonly additionalProperties: false;
                }];
            };
        };
    };
    readonly default: {};
    readonly required: readonly ["redirects"];
    readonly additionalProperties?: (string | import(".").ScalarSchema | NodeType | null | undefined) | ((value: any, key: string) => string | import(".").ScalarSchema | NodeType | null | undefined);
    readonly items?: string | undefined;
    readonly requiredOneOf?: string[] | undefined;
    readonly allowed?: ((value: any) => string[] | undefined) | undefined;
    readonly extensionsPrefix?: string | undefined;
};
